Q1.	 Map Problem: ==========

BreadthFirstTreeSearch:		(cost=568.0, expansions=48)	Timisoara Arad Sibiu Fagaras Bucharest 
BreadthFirstGraphSearch:	(cost=568.0, expansions=11)	Timisoara Arad Sibiu Fagaras Bucharest 
DepthFirstTreeSearch:	(cost=3948.0, expansions=37)	Timisoara Lugoj Timisoara Arad Timisoara Arad Timisoara Arad Timisoara Lugoj Mehadia Lugoj Timisoara Arad Sibiu Oradea Sibiu Arad Timisoara Arad Zerind Oradea Zerind Arad Zerind Oradea Zerind Arad Zerind Arad Sibiu Rimnicu Craiova Pitesti Rimnicu Craiova Pitesti Bucharest 
DepthFirstGraphSearch:	(cost=568.0, expansions=4)	Timisoara Arad Sibiu Fagaras Bucharest 
UniformCostTreeSearch:	(cost=536.0, expansions=93)	Timisoara Arad Sibiu Rimnicu Pitesti Bucharest 
UniformCostGraphSearch:	(cost=536.0, expansions=12)	Timisoara Arad Sibiu Rimnicu Pitesti Bucharest 
IterativeDeepeningTreeSearch:	(cost=568.0, expansions=4)	Timisoara Arad Sibiu Fagaras Bucharest 
IterativeDeepeningGraphSearch:	(cost=568.0, expansions=4)	Timisoara Arad Sibiu Fagaras Bucharest 

Q2.	 Map Problem: Heuristic Function and Printed Trees ==========

AstarTreeSearch:	(cost=536.0, expansions=11)	Timisoara Arad Sibiu Rimnicu Pitesti Bucharest 


Timisoara(g=0.0, h=329.0, f=329.0)order=0
	Arad(g=118.0, h=366.0, f=484.0)order=1
		Zerind(g=193.0, h=374.0, f=567.0)order=2
		Sibiu(g=258.0, h=253.0, f=511.0)order=2
			Oradea(g=409.0, h=380.0, f=789.0)order=3
			Arad(g=398.0, h=366.0, f=764.0)order=3
			Fagaras(g=357.0, h=176.0, f=533.0)order=3
				Bucharest(g=568.0, h=0.0, f=568.0)order=4
				Sibiu(g=456.0, h=253.0, f=709.0)order=4
			Rimnicu(g=338.0, h=193.0, f=531.0)order=3
				Craiova(g=484.0, h=160.0, f=644.0)order=4
				Sibiu(g=418.0, h=253.0, f=671.0)order=4
				Pitesti(g=435.0, h=100.0, f=535.0)order=4
					Craiova(g=573.0, h=160.0, f=733.0)order=5
					Bucharest(g=536.0, h=0.0, f=536.0)order=5
					Rimnicu(g=532.0, h=193.0, f=725.0)order=5
		Timisoara(g=236.0, h=329.0, f=565.0)order=2
	Lugoj(g=111.0, h=244.0, f=355.0)order=1
		Mehadia(g=181.0, h=241.0, f=422.0)order=2
			Drobeta(g=256.0, h=242.0, f=498.0)order=3
				Craiova(g=376.0, h=160.0, f=536.0)order=4
					Drobeta(g=496.0, h=242.0, f=738.0)order=5
					Rimnicu(g=522.0, h=193.0, f=715.0)order=5
					Pitesti(g=514.0, h=100.0, f=614.0)order=5
				Mehadia(g=331.0, h=241.0, f=572.0)order=4

			Lugoj(g=251.0, h=244.0, f=495.0)order=3
				Mehadia(g=321.0, h=241.0, f=562.0)order=4
				Timisoara(g=362.0, h=329.0, f=691.0)order=4
		Timisoara(g=222.0, h=329.0, f=551.0)order=2
		

AstarGraphSearch:	(cost=536.0, expansions=10)	Timisoara Arad Sibiu Rimnicu Pitesti Bucharest 

Timisoara(g=0.0, h=329.0, f=329.0)order=0
	Arad(g=118.0, h=366.0, f=484.0)order=1
		Zerind(g=193.0, h=374.0, f=567.0)order=2
		Sibiu(g=258.0, h=253.0, f=511.0)order=2
			Oradea(g=409.0, h=380.0, f=789.0)order=3
			Arad(g=398.0, h=366.0, f=764.0)order=3
			Fagaras(g=357.0, h=176.0, f=533.0)order=3
				Bucharest(g=568.0, h=0.0, f=568.0)order=4
				Sibiu(g=456.0, h=253.0, f=709.0)order=4
			Rimnicu(g=338.0, h=193.0, f=531.0)order=3
				Craiova(g=484.0, h=160.0, f=644.0)order=4
				Sibiu(g=418.0, h=253.0, f=671.0)order=4
				Pitesti(g=435.0, h=100.0, f=535.0)order=4
					Craiova(g=573.0, h=160.0, f=733.0)order=5
					Bucharest(g=536.0, h=0.0, f=536.0)order=5
					Rimnicu(g=532.0, h=193.0, f=725.0)order=5
		Timisoara(g=236.0, h=329.0, f=565.0)order=2
	Lugoj(g=111.0, h=244.0, f=355.0)order=1
		Mehadia(g=181.0, h=241.0, f=422.0)order=2
			Drobeta(g=256.0, h=242.0, f=498.0)order=3
				Craiova(g=376.0, h=160.0, f=536.0)order=4
					Drobeta(g=496.0, h=242.0, f=738.0)order=5
					Rimnicu(g=522.0, h=193.0, f=715.0)order=5
					Pitesti(g=514.0, h=100.0, f=614.0)order=5
				Mehadia(g=331.0, h=241.0, f=572.0)order=4
			Lugoj(g=251.0, h=244.0, f=495.0)order=3
		Timisoara(g=222.0, h=329.0, f=551.0)order=2


Q3.	 Cannibals-Missionaries Problem: ==========

BreadthFirstTreeSearch:		(cost=11.0, expansions=9089)	 3 3 1 0 0 0  1 3 0 2 0 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  1 1 0 2 2 1  2 2 1 1 1 0  2 0 0 1 3 1  3 0 1 0 3 0  1 0 0 2 3 1  1 1 1 2 2 0  0 0 0 3 3 1 

BreadthFirstGraphSearch:	(cost=11.0, expansions=14)	 3 3 1 0 0 0  2 2 0 1 1 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  1 1 0 2 2 1  2 2 1 1 1 0  2 0 0 1 3 1  3 0 1 0 3 0  1 0 0 2 3 1  1 1 1 2 2 0  0 0 0 3 3 1 

DepthFirstTreeSearch:	(cost=213.0, expansions=213)	 3 3 1 0 0 0  2 2 0 1 1 1  3 3 1 0 0 0  1 3 0 2 0 1  2 3 1 1 0 0  1 3 0 2 0 1  2 3 1 1 0 0  0 3 0 3 0 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  0 3 0 3 0 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  0 3 0 3 0 1  1 3 1 2 0 0  0 3 0 3 0 1  2 3 1 1 0 0  1 3 0 2 0 1  3 3 1 0 0 0  2 3 0 1 0 1  3 3 1 0 0 0  2 2 0 1 1 1  3 3 1 0 0 0  1 3 0 2 0 1  2 3 1 1 0 0  1 3 0 2 0 1  3 3 1 0 0 0  2 3 0 1 0 1  3 3 1 0 0 0  1 3 0 2 0 1  3 3 1 0 0 0  1 3 0 2 0 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  0 3 0 3 0 1  1 3 1 2 0 0  0 3 0 3 0 1  2 3 1 1 0 0  2 2 0 1 1 1  3 3 1 0 0 0  2 2 0 1 1 1  2 3 1 1 0 0  1 3 0 2 0 1  2 3 1 1 0 0  1 3 0 2 0 1  2 3 1 1 0 0  1 3 0 2 0 1  2 3 1 1 0 0  1 3 0 2 0 1  2 3 1 1 0 0  1 3 0 2 0 1  3 3 1 0 0 0  2 2 0 1 1 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  0 3 0 3 0 1  2 3 1 1 0 0  2 2 0 1 1 1  3 3 1 0 0 0  1 3 0 2 0 1  3 3 1 0 0 0  1 3 0 2 0 1  3 3 1 0 0 0  2 3 0 1 0 1  3 3 1 0 0 0  2 3 0 1 0 1  3 3 1 0 0 0  1 3 0 2 0 1  2 3 1 1 0 0  1 3 0 2 0 1  3 3 1 0 0 0  2 3 0 1 0 1  3 3 1 0 0 0  2 2 0 1 1 1  3 3 1 0 0 0  2 3 0 1 0 1  3 3 1 0 0 0  2 2 0 1 1 1  2 3 1 1 0 0  2 2 0 1 1 1  2 3 1 1 0 0  1 3 0 2 0 1  3 3 1 0 0 0  2 2 0 1 1 1  2 3 1 1 0 0  1 3 0 2 0 1  3 3 1 0 0 0  2 2 0 1 1 1  3 3 1 0 0 0  1 3 0 2 0 1  3 3 1 0 0 0  2 3 0 1 0 1  3 3 1 0 0 0  2 2 0 1 1 1  3 3 1 0 0 0  2 2 0 1 1 1  2 3 1 1 0 0  2 2 0 1 1 1  2 3 1 1 0 0  2 2 0 1 1 1  2 3 1 1 0 0  0 3 0 3 0 1  2 3 1 1 0 0  1 3 0 2 0 1  2 3 1 1 0 0  2 2 0 1 1 1  2 3 1 1 0 0  2 2 0 1 1 1  3 3 1 0 0 0  2 2 0 1 1 1  3 3 1 0 0 0  2 2 0 1 1 1  3 3 1 0 0 0  2 2 0 1 1 1  3 3 1 0 0 0  2 2 0 1 1 1  2 3 1 1 0 0  1 3 0 2 0 1  3 3 1 0 0 0  1 3 0 2 0 1  3 3 1 0 0 0  2 3 0 1 0 1  3 3 1 0 0 0  2 3 0 1 0 1  3 3 1 0 0 0  1 3 0 2 0 1  2 3 1 1 0 0  1 3 0 2 0 1  3 3 1 0 0 0  2 2 0 1 1 1  3 3 1 0 0 0  2 2 0 1 1 1  2 3 1 1 0 0  2 2 0 1 1 1  3 3 1 0 0 0  1 3 0 2 0 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  0 3 0 3 0 1  1 3 1 2 0 0  0 3 0 3 0 1  2 3 1 1 0 0  1 3 0 2 0 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  1 1 0 2 2 1  1 3 1 2 0 0  0 3 0 3 0 1  1 3 1 2 0 0  1 1 0 2 2 1  1 3 1 2 0 0  0 3 0 3 0 1  2 3 1 1 0 0  1 3 0 2 0 1  2 3 1 1 0 0  1 3 0 2 0 1  3 3 1 0 0 0  2 3 0 1 0 1  3 3 1 0 0 0  1 3 0 2 0 1  3 3 1 0 0 0  1 3 0 2 0 1  3 3 1 0 0 0  2 2 0 1 1 1  3 3 1 0 0 0  1 3 0 2 0 1  2 3 1 1 0 0  0 3 0 3 0 1  2 3 1 1 0 0  0 3 0 3 0 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  1 1 0 2 2 1  2 2 1 1 1 0  1 1 0 2 2 1  1 3 1 2 0 0  1 1 0 2 2 1  2 2 1 1 1 0  1 1 0 2 2 1  2 2 1 1 1 0  1 1 0 2 2 1  2 2 1 1 1 0  1 1 0 2 2 1  1 3 1 2 0 0  1 1 0 2 2 1  1 3 1 2 0 0  1 1 0 2 2 1  2 2 1 1 1 0  1 1 0 2 2 1  1 3 1 2 0 0  1 1 0 2 2 1  2 2 1 1 1 0  1 1 0 2 2 1  1 3 1 2 0 0  1 1 0 2 2 1  2 2 1 1 1 0  2 0 0 1 3 1  2 2 1 1 1 0  1 1 0 2 2 1  2 2 1 1 1 0  2 0 0 1 3 1  3 0 1 0 3 0  1 0 0 2 3 1  2 0 1 1 3 0  1 0 0 2 3 1  2 0 1 1 3 0  0 0 0 3 3 1 

DepthFirstGraphSearch:	(cost=11.0, expansions=13)	 3 3 1 0 0 0  1 3 0 2 0 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  1 1 0 2 2 1  2 2 1 1 1 0  2 0 0 1 3 1  3 0 1 0 3 0  1 0 0 2 3 1  1 1 1 2 2 0  0 0 0 3 3 1 

UniformCostTreeSearch:	(cost=11.0, expansions=13157)	 3 3 1 0 0 0  1 3 0 2 0 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  1 1 0 2 2 1  2 2 1 1 1 0  2 0 0 1 3 1  3 0 1 0 3 0  1 0 0 2 3 1  2 0 1 1 3 0  0 0 0 3 3 1 

UniformCostGraphSearch:	(cost=11.0, expansions=14)	 3 3 1 0 0 0  2 2 0 1 1 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  1 1 0 2 2 1  2 2 1 1 1 0  2 0 0 1 3 1  3 0 1 0 3 0  1 0 0 2 3 1  1 1 1 2 2 0  0 0 0 3 3 1 

IterativeDeepeningTreeSearch:	(cost=19.0, expansions=19)	 3 3 1 0 0 0  2 2 0 1 1 1  2 3 1 1 0 0  2 2 0 1 1 1  2 3 1 1 0 0  0 3 0 3 0 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  1 1 0 2 2 1  1 3 1 2 0 0  1 1 0 2 2 1  2 2 1 1 1 0  2 0 0 1 3 1  3 0 1 0 3 0  1 0 0 2 3 1  1 1 1 2 2 0  1 0 0 2 3 1  1 1 1 2 2 0  0 0 0 3 3 1 

IterativeDeepeningGraphSearch:	(cost=11.0, expansions=11)	 3 3 1 0 0 0  1 3 0 2 0 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  1 1 0 2 2 1  2 2 1 1 1 0  2 0 0 1 3 1  3 0 1 0 3 0  1 0 0 2 3 1  2 0 1 1 3 0  0 0 0 3 3 1 
Water Jugs Problem Solver:

Q4.	 Water Jugs Problem: ==========

Note the state array indicates how much water is in 12g 8g 3g jugs and how much was poured into the ground
BreadthFirstTreeSearch:		(cost=23.0, expansions=64)	 0 0 0 0  12 0 0 0  9 0 3 0  1 8 3 0 

BreadthFirstGraphSearch:	(cost=23.0, expansions=32)	 0 0 0 0  12 0 0 0  9 0 3 0  1 8 3 0 

DepthFirstTreeSearch:	(cost=435.0, expansions=76)	 0 0 0 0  0 8 0 0  0 0 0 8  0 8 0 8  0 8 3 8  3 8 0 8  12 8 0 8  12 0 0 16  0 0 0 28  0 8 0 28  0 8 3 28  8 0 3 28  11 0 0 28  12 0 0 28  4 8 0 28  0 8 0 32  12 8 0 32  12 0 0 40  12 8 0 40  0 8 0 52  0 0 0 60  0 8 0 60  0 5 3 60  0 0 3 65  0 0 0 68  12 0 0 68  4 8 0 68  4 8 3 68  4 8 0 71  0 8 0 75  0 5 3 75  0 5 0 78  12 5 0 78  9 8 0 78  12 8 0 78  9 8 3 78  12 8 3 78  12 8 0 81  9 8 3 81  9 0 3 89  12 0 3 89  12 3 0 89  7 8 0 89  7 5 3 89  7 0 3 94  7 0 0 97  0 0 0 104  12 0 0 104  9 0 3 104  9 8 3 104  12 8 0 104  12 8 3 104  12 8 0 107  0 8 0 119  12 8 0 119  12 8 3 119  0 8 3 131  3 8 0 131  12 8 0 131  0 8 0 143  8 0 0 143  8 8 0 143  8 5 3 143  12 5 3 143  12 0 3 148  12 3 0 148  9 3 3 148  9 0 3 151  9 0 0 154  9 8 0 154  12 8 0 154  12 5 3 154  12 5 0 157  9 8 0 157  9 5 3 157  9 0 3 162  1 8 3 162 

DepthFirstGraphSearch:	(cost=239.0, expansions=41)	 0 0 0 0  0 0 3 0  0 0 0 3  0 8 0 3  8 0 0 3  5 0 3 3  12 0 3 3  12 3 0 3  0 3 0 15  0 8 0 15  0 5 3 15  5 0 3 15  12 0 3 15  0 0 3 27  0 8 3 27  8 0 3 27  8 8 3 27  8 0 3 35  0 0 3 43  0 0 0 46  0 0 3 46  0 8 3 46  8 0 3 46  8 8 3 46  0 8 3 54  12 8 3 54  12 0 3 62  0 0 3 74  0 3 0 74  12 3 0 74  12 0 3 74  12 0 0 77  9 0 3 77  9 0 0 80  12 0 0 80  9 0 3 80  12 0 3 80  12 3 0 80  12 3 3 80  12 6 0 80  12 6 3 80  12 8 1 80 

UniformCostTreeSearch:	(cost=17.0, expansions=195)	 0 0 0 0  0 0 3 0  0 3 0 0  0 3 3 0  0 6 0 0  0 6 3 0  0 8 1 0 

UniformCostGraphSearch:	(cost=17.0, expansions=40)	 0 0 0 0  0 0 3 0  0 3 0 0  0 3 3 0  0 6 0 0  0 6 3 0  0 8 1 0 

IterativeDeepeningTreeSearch:	(cost=23.0, expansions=3)	 0 0 0 0  12 0 0 0  9 0 3 0  1 8 3 0 

IterativeDeepeningGraphSearch:	(cost=26.0, expansions=5)	 0 0 0 0  12 0 0 0  9 0 3 0  9 3 0 0  4 8 0 0  1 8 3 0 

Q5.	 Cannibals-Missionaries Problem with Heuristic function: ==========


GreedyBestFirstTreeSearch:	(cost=11.0, expansions=20)	 3 3 1 0 0 0  2 2 0 1 1 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  1 1 0 2 2 1  2 2 1 1 1 0  2 0 0 1 3 1  3 0 1 0 3 0  1 0 0 2 3 1  1 1 1 2 2 0  0 0 0 3 3 1 
GreedyBestFirstGraphSearch:	(cost=11.0, expansions=12)	 3 3 1 0 0 0  1 3 0 2 0 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  1 1 0 2 2 1  2 2 1 1 1 0  2 0 0 1 3 1  3 0 1 0 3 0  1 0 0 2 3 1  2 0 1 1 3 0  0 0 0 3 3 1 

AstarTreeSearch:        (cost=11.0, expansions=49)       3 3 1 0 0 0  2 2 0 1 1 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  1 1 0 2 2 1  2 2 1 1 1 0  2 0 0 1 3 1  3 0 1 0 3 0  1 0 0 2 3 1  1 1 1 2 2 0  0 0 0 3 3 1
AstarGraphSearch:       (cost=11.0, expansions=13)       3 3 1 0 0 0  1 3 0 2 0 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  1 1 0 2 2 1  2 2 1 1 1 0  2 0 0 1 3 1  3 0 1 0 3 0  1 0 0 2 3 1  2 0 1 1 3 0  0 0 0 3 3 1

BreadthFirstTreeSearch:		(cost=11.0, expansions=10597)	 3 3 1 0 0 0  1 3 0 2 0 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  1 1 0 2 2 1  2 2 1 1 1 0  2 0 0 1 3 1  3 0 1 0 3 0  1 0 0 2 3 1  2 0 1 1 3 0  0 0 0 3 3 1 
BreadthFirstGraphSearch:	(cost=11.0, expansions=14)	 3 3 1 0 0 0  1 3 0 2 0 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  1 1 0 2 2 1  2 2 1 1 1 0  2 0 0 1 3 1  3 0 1 0 3 0  1 0 0 2 3 1  1 1 1 2 2 0  0 0 0 3 3 1 

DepthFirstTreeSearch:	(cost=103.0, expansions=103)	 3 3 1 0 0 0  2 2 0 1 1 1  3 3 1 0 0 0  2 2 0 1 1 1  2 3 1 1 0 0  2 2 0 1 1 1  3 3 1 0 0 0  2 2 0 1 1 1  2 3 1 1 0 0  2 2 0 1 1 1  2 3 1 1 0 0  1 3 0 2 0 1  2 3 1 1 0 0  2 2 0 1 1 1  3 3 1 0 0 0  2 2 0 1 1 1  3 3 1 0 0 0  1 3 0 2 0 1  2 3 1 1 0 0  0 3 0 3 0 1  2 3 1 1 0 0  2 2 0 1 1 1  3 3 1 0 0 0  2 3 0 1 0 1  3 3 1 0 0 0  1 3 0 2 0 1  3 3 1 0 0 0  2 3 0 1 0 1  3 3 1 0 0 0  2 3 0 1 0 1  3 3 1 0 0 0  1 3 0 2 0 1  3 3 1 0 0 0  1 3 0 2 0 1  2 3 1 1 0 0  2 2 0 1 1 1  2 3 1 1 0 0  2 2 0 1 1 1  2 3 1 1 0 0  2 2 0 1 1 1  3 3 1 0 0 0  1 3 0 2 0 1  3 3 1 0 0 0  1 3 0 2 0 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  0 3 0 3 0 1  1 3 1 2 0 0  0 3 0 3 0 1  2 3 1 1 0 0  2 2 0 1 1 1  3 3 1 0 0 0  2 3 0 1 0 1  3 3 1 0 0 0  2 3 0 1 0 1  3 3 1 0 0 0  1 3 0 2 0 1  2 3 1 1 0 0  2 2 0 1 1 1  2 3 1 1 0 0  2 2 0 1 1 1  3 3 1 0 0 0  1 3 0 2 0 1  2 3 1 1 0 0  2 2 0 1 1 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  0 3 0 3 0 1  2 3 1 1 0 0  2 2 0 1 1 1  2 3 1 1 0 0  1 3 0 2 0 1  3 3 1 0 0 0  2 2 0 1 1 1  3 3 1 0 0 0  2 3 0 1 0 1  3 3 1 0 0 0  1 3 0 2 0 1  2 3 1 1 0 0  2 2 0 1 1 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  1 1 0 2 2 1  2 2 1 1 1 0  2 0 0 1 3 1  2 2 1 1 1 0  2 0 0 1 3 1  2 2 1 1 1 0  1 1 0 2 2 1  1 3 1 2 0 0  1 1 0 2 2 1  2 2 1 1 1 0  2 0 0 1 3 1  3 0 1 0 3 0  1 0 0 2 3 1  3 0 1 0 3 0  1 0 0 2 3 1  1 1 1 2 2 0  1 0 0 2 3 1  2 0 1 1 3 0  0 0 0 3 3 1 
DepthFirstGraphSearch:	(cost=11.0, expansions=12)	 3 3 1 0 0 0  2 2 0 1 1 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  1 1 0 2 2 1  2 2 1 1 1 0  2 0 0 1 3 1  3 0 1 0 3 0  1 0 0 2 3 1  1 1 1 2 2 0  0 0 0 3 3 1 

UniformCostTreeSearch:	(cost=11.0, expansions=14143)	 3 3 1 0 0 0  1 3 0 2 0 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  1 1 0 2 2 1  2 2 1 1 1 0  2 0 0 1 3 1  3 0 1 0 3 0  1 0 0 2 3 1  1 1 1 2 2 0  0 0 0 3 3 1 
UniformCostGraphSearch:	(cost=11.0, expansions=14)	 3 3 1 0 0 0  2 2 0 1 1 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  1 1 0 2 2 1  2 2 1 1 1 0  2 0 0 1 3 1  3 0 1 0 3 0  1 0 0 2 3 1  1 1 1 2 2 0  0 0 0 3 3 1 

IterativeDeepeningTreeSearch:	(cost=19.0, expansions=19)	 3 3 1 0 0 0  1 3 0 2 0 1  2 3 1 1 0 0  2 2 0 1 1 1  2 3 1 1 0 0  0 3 0 3 0 1  2 3 1 1 0 0  1 3 0 2 0 1  2 3 1 1 0 0  1 3 0 2 0 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  1 1 0 2 2 1  2 2 1 1 1 0  2 0 0 1 3 1  3 0 1 0 3 0  1 0 0 2 3 1  1 1 1 2 2 0  0 0 0 3 3 1 
IterativeDeepeningGraphSearch:	(cost=11.0, expansions=12)	 3 3 1 0 0 0  2 2 0 1 1 1  2 3 1 1 0 0  0 3 0 3 0 1  1 3 1 2 0 0  1 1 0 2 2 1  2 2 1 1 1 0  2 0 0 1 3 1  3 0 1 0 3 0  1 0 0 2 3 1  1 1 1 2 2 0  0 0 0 3 3 1 
